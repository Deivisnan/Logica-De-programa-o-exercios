class Heap:
    def __init__(self):

        self.heap = []

    def insert(self, process):

        self.heap.append(process)

        self.heapify_up(len(self.heap) - 1)

    def remove(self):
        if not self.heap:

            return None
        if len(self.heap) == 1:

            return self.heap.pop()

        root = self.heap[0]

        self.heap[0] = self.heap.pop()

        self.heapify_down(0)
        return root

    def heapify_up(self, index):
        while index > 0:
            parent_index = (index - 1) // 2
            if self.heap[parent_index][1] > self.heap[index][1]:
                
                self.heap[parent_index], self.heap[index] = self.heap[index], self.heap[parent_index]
                index = parent_index
            else:
                break

    def heapify_down(self, index):
        left_child_index = 2 * index + 1
        right_child_index = 2 * index + 2
        smallest = index

        if left_child_index < len(self.heap) and self.heap[left_child_index][1] < self.heap[smallest][1]:
            smallest = left_child_index

        if right_child_index < len(self.heap) and self.heap[right_child_index][1] < self.heap[smallest][1]:
            smallest = right_child_index

        if smallest != index:
            self.heap[index], self.heap[smallest] = self.heap[smallest], self.heap[index]
            self.heapify_down(smallest)


def gerenciador_de_processos(N, Q, processos):
    heap = Heap()
    for i, (identificador, prioridade) in enumerate(processos, 1):
        heap.insert((identificador, prioridade))
        if i % Q == 0:
            heap.remove()

    # ImpressÃ£o em prÃ©-ordem dos processos restantes na heap
    def preorder_traversal(index):
        if index < len(heap.heap):
            print(heap.heap[index][0], end=" ")
            preorder_traversal(2 * index + 1)
            preorder_traversal(2 * index + 2)

    preorder_traversal(0)


# Exemplo de uso
N, Q = map(int, input().split())

processos = [input().split() for _ in range(N)]
processos = [(identificador, int(prioridade)) for identificador, prioridade in processos]

gerenciador_de_processos(N, Q, processos)
